{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "l200synapse"
		},
		"AzureBlobStorage1_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'AzureBlobStorage1'"
		},
		"AzureDataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage2'"
		},
		"AzureDataLakeStorage3_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage3'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics1'"
		},
		"AzureSynapseAnalytics2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics2'"
		},
		"CosmosDb1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDb1'"
		},
		"CosmosDb2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDb2'"
		},
		"FileSource_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'FileSource'"
		},
		"l200synapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'l200synapse-WorkspaceDefaultSqlServer'"
		},
		"l200withaccesskey_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'l200withaccesskey'"
		},
		"AzureBlobStorage1_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://l200permissiontestsa.blob.core.windows.net"
		},
		"AzureBlobStorage1_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
		},
		"AzureBlobStorage1_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "a20176f6-0520-4d02-98ca-7cc36498b603"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://l200permissiontestsa.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://l200testsa.dfs.core.windows.net"
		},
		"AzureDataLakeStorage3_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://l200testsa.dfs.core.windows.net"
		},
		"l200kv_LinkedService_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-l200-test.vault.azure.net/"
		},
		"l200synapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://l200testsa.dfs.core.windows.net"
		},
		"nyc_tlc_green_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'nyc_tlc_green'"
		},
		"wsasadvidmcorpeus2-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stdvidmcorpeus2.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "test1234"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDbSqlApiCollection1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDb2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"data": {
							"type": "object",
							"properties": {
								"order": {
									"type": "object",
									"properties": {
										"code": {
											"type": "string"
										},
										"calculated": {
											"type": "boolean"
										},
										"deliveryItemsQuantity": {
											"type": "integer"
										},
										"entries": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"basePrice": {
														"type": "object",
														"properties": {
															"currencyIso": {
																"type": "string"
															},
															"formattedValue": {
																"type": "string"
															},
															"priceType": {
																"type": "string"
															},
															"value": {
																"type": "number"
															}
														}
													},
													"entryNumber": {
														"type": "integer"
													},
													"product": {
														"type": "object",
														"properties": {
															"code": {
																"type": "string"
															},
															"productId": {
																"type": "string"
															},
															"availableForPickup": {
																"type": "boolean"
															},
															"manufacturer": {
																"type": "string"
															},
															"purchasable": {
																"type": "boolean"
															},
															"url": {
																"type": "string"
															},
															"itemUnitOfMeasure": {
																"type": "string"
															},
															"originalUnitOfMeasure": {
																"type": "string"
															},
															"upcType": {
																"type": "string"
															},
															"name": {
																"type": "string"
															},
															"upcId": {
																"type": "string"
															},
															"uom": {
																"type": "string"
															}
														}
													},
													"quantity": {
														"type": "integer"
													},
													"updateable": {
														"type": "boolean"
													}
												}
											}
										},
										"guid": {
											"type": "string"
										},
										"net": {
											"type": "string"
										},
										"paymentInfo": {
											"type": "object",
											"properties": {
												"accountHolderName": {
													"type": "string"
												},
												"billingAddress": {
													"type": "object",
													"properties": {
														"country": {
															"type": "object",
															"properties": {
																"isocode": {
																	"type": "string"
																},
																"name": {
																	"type": "string"
																}
															}
														},
														"email": {
															"type": "string"
														},
														"firstName": {
															"type": "string"
														},
														"formattedAddress": {
															"type": "string"
														},
														"id": {
															"type": "string"
														},
														"lastName": {
															"type": "string"
														},
														"line1": {
															"type": "string"
														},
														"postalCode": {
															"type": "string"
														},
														"shippingAddress": {
															"type": "string"
														},
														"town": {
															"type": "string"
														},
														"state": {
															"type": "object",
															"properties": {
																"isocode": {
																	"type": "string"
																},
																"name": {
																	"type": "string"
																}
															}
														},
														"visibleInAddressBook": {
															"type": "string"
														}
													}
												},
												"cardNumber": {
													"type": "string"
												},
												"cardType": {
													"type": "object",
													"properties": {
														"code": {
															"type": "string"
														},
														"name": {
															"type": "string"
														}
													}
												},
												"defaultPayment": {
													"type": "boolean"
												},
												"expiryMonth": {
													"type": "string"
												},
												"expiryYear": {
													"type": "string"
												},
												"paymentCardExpiration": {
													"type": "string"
												},
												"id": {
													"type": "string"
												},
												"saved": {
													"type": "boolean"
												},
												"subscriptionId": {
													"type": "string"
												},
												"authTime": {
													"type": "string"
												},
												"requestToken": {
													"type": "string"
												},
												"transactionStatus": {
													"type": "string"
												},
												"transactionStatusDetails": {
													"type": "string"
												}
											}
										},
										"pickupItemsQuantity": {
											"type": "integer"
										},
										"pickUpSlotInfo": {
											"type": "object",
											"properties": {
												"pickupSlotId": {
													"type": "string"
												},
												"pickupDate": {
													"type": "string"
												}
											}
										},
										"site": {
											"type": "string"
										},
										"store": {
											"type": "string"
										},
										"totalItems": {
											"type": "integer"
										},
										"subTotal": {
											"type": "object",
											"properties": {
												"currencyIso": {
													"type": "string"
												},
												"formattedValue": {
													"type": "string"
												},
												"priceType": {
													"type": "string"
												},
												"value": {
													"type": "number"
												}
											}
										},
										"deliveryCost": {
											"type": "object",
											"properties": {
												"currencyIso": {
													"type": "string"
												},
												"formattedValue": {
													"type": "string"
												},
												"priceType": {
													"type": "string"
												},
												"value": {
													"type": "number"
												}
											}
										},
										"depositPrice": {
											"type": "object",
											"properties": {
												"currencyIso": {
													"type": "string"
												},
												"formattedValue": {
													"type": "string"
												},
												"priceType": {
													"type": "string"
												},
												"value": {
													"type": "integer"
												}
											}
										},
										"totalDiscounts": {
											"type": "object",
											"properties": {
												"currencyIso": {
													"type": "string"
												},
												"formattedValue": {
													"type": "string"
												},
												"priceType": {
													"type": "string"
												},
												"value": {
													"type": "number"
												}
											}
										},
										"totalPrice": {
											"type": "object",
											"properties": {
												"currencyIso": {
													"type": "string"
												},
												"formattedValue": {
													"type": "string"
												},
												"priceType": {
													"type": "string"
												},
												"value": {
													"type": "number"
												}
											}
										},
										"totalPriceWithTax": {
											"type": "object",
											"properties": {
												"currencyIso": {
													"type": "string"
												},
												"formattedValue": {
													"type": "string"
												},
												"priceType": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										},
										"totalTax": {
											"type": "object",
											"properties": {
												"currencyIso": {
													"type": "string"
												},
												"formattedValue": {
													"type": "string"
												},
												"priceType": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										},
										"created": {
											"type": "string"
										},
										"substitutionPreferenceTypeId": {
											"type": "string"
										},
										"user": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												},
												"uid": {
													"type": "string"
												},
												"accountId": {
													"type": "string"
												},
												"customerFirstName": {
													"type": "string"
												},
												"customerLastName": {
													"type": "string"
												},
												"customerOrderEmailAddress": {
													"type": "string"
												},
												"mperksId": {
													"type": "string"
												},
												"mPerksPhone": {
													"type": "string"
												}
											}
										},
										"unitId": {
											"type": "string"
										},
										"status": {
											"type": "string"
										},
										"statusDisplay": {
											"type": "string"
										}
									}
								},
								"ResultCode": {
									"type": "integer"
								},
								"ResultDescription": {
									"type": "string"
								},
								"cart": {
									"type": "object",
									"properties": {
										"storeId": {
											"type": "integer"
										},
										"terminalType": {
											"type": "integer"
										},
										"terminal": {
											"type": "integer"
										},
										"depositTotal": {
											"type": "integer"
										},
										"cartWasTotal": {
											"type": "integer"
										},
										"cartNowTotal": {
											"type": "integer"
										},
										"cartSavingsTotal": {
											"type": "integer"
										},
										"cartRewardTotal": {
											"type": "integer"
										},
										"reportAttributeLevel": {
											"type": "integer"
										},
										"selectedHighValueOnly": {
											"type": "boolean"
										},
										"reportCostingInfo": {
											"type": "boolean"
										},
										"rollDepositsInPrimary": {
											"type": "boolean"
										},
										"reportUnitPricing": {
											"type": "boolean"
										},
										"cartItems": {
											"type": "array"
										},
										"loyalty": {
											"type": "object",
											"properties": {
												"mPerks": {
													"type": "string"
												},
												"promoIds": {
													"type": "array",
													"items": {
														"type": "integer"
													}
												},
												"promoVars": {
													"type": "object"
												}
											}
										},
										"loyaltySVIDs": {
											"type": "null"
										},
										"payment": {
											"type": "null"
										},
										"rewards": {
											"type": "array"
										},
										"highValuePromos": {
											"type": "null"
										},
										"costingInfo": {
											"type": "null"
										}
									}
								},
								"soapenv:Envelope": {
									"type": "object",
									"properties": {
										"soapenv:Body": {
											"type": "object",
											"properties": {
												"VertexEnvelope": {
													"type": "object",
													"properties": {
														"ApplicationData": {
															"type": "object",
															"properties": {
																"ResponseTimeMS": {
																	"type": "string"
																}
															}
														},
														"Login": {
															"type": "object",
															"properties": {
																"TrustedId": {
																	"type": "string"
																}
															}
														},
														"QuotationResponse": {
															"type": "object",
															"properties": {
																"Currency": {
																	"type": "object",
																	"properties": {
																		"@isoCurrencyCodeAlpha": {
																			"type": "string"
																		},
																		"@isoCurrencyCodeNum": {
																			"type": "string"
																		},
																		"@isoCurrencyName": {
																			"type": "string"
																		}
																	}
																},
																"Customer": {
																	"type": "object",
																	"properties": {
																		"CustomerCode": {
																			"type": "string"
																		},
																		"Destination": {
																			"type": "object",
																			"properties": {
																				"City": {
																					"type": "string"
																				},
																				"Country": {
																					"type": "string"
																				},
																				"MainDivision": {
																					"type": "string"
																				},
																				"PostalCode": {
																					"type": "string"
																				},
																				"StreetAddress1": {
																					"type": "string"
																				},
																				"StreetAddress2": {
																					"type": "string"
																				},
																				"@taxAreaId": {
																					"type": "string"
																				}
																			}
																		}
																	}
																},
																"LineItem": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"AssistedParameters": {
																				"type": "object",
																				"properties": {
																					"AssistedParameter": {
																						"type": "object",
																						"properties": {
																							"#text": {
																								"type": "string"
																							},
																							"@originalValue": {
																								"type": "string"
																							},
																							"@paramName": {
																								"type": "string"
																							},
																							"@phase": {
																								"type": "string"
																							},
																							"@ruleName": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"Discount": {
																				"type": "object",
																				"properties": {
																					"DiscountAmount": {
																						"type": "string"
																					}
																				}
																			},
																			"ExtendedPrice": {
																				"type": "string"
																			},
																			"FairMarketValue": {
																				"type": "string"
																			},
																			"Product": {
																				"type": "object",
																				"properties": {
																					"#text": {
																						"type": "string"
																					},
																					"@productClass": {
																						"type": "string"
																					}
																				}
																			},
																			"Quantity": {
																				"type": "string"
																			},
																			"Taxes": {
																				"type": "object",
																				"properties": {
																					"BasisRuleId": {
																						"type": "string"
																					},
																					"CalculatedTax": {
																						"type": "string"
																					},
																					"EffectiveRate": {
																						"type": "string"
																					},
																					"Imposition": {
																						"type": "object",
																						"properties": {
																							"#text": {
																								"type": "string"
																							},
																							"@impositionId": {
																								"type": "string"
																							}
																						}
																					},
																					"ImpositionType": {
																						"type": "object",
																						"properties": {
																							"#text": {
																								"type": "string"
																							},
																							"@impositionTypeId": {
																								"type": "string"
																							}
																						}
																					},
																					"Jurisdiction": {
																						"type": "object",
																						"properties": {
																							"#text": {
																								"type": "string"
																							},
																							"@jurisdictionId": {
																								"type": "string"
																							},
																							"@jurisdictionLevel": {
																								"type": "string"
																							}
																						}
																					},
																					"NonTaxable": {
																						"type": "string"
																					},
																					"TaxRuleId": {
																						"type": "string"
																					},
																					"Taxable": {
																						"type": "string"
																					},
																					"@reasonCode": {
																						"type": "string"
																					},
																					"@situs": {
																						"type": "string"
																					},
																					"@taxCollectedFromParty": {
																						"type": "string"
																					},
																					"@taxResult": {
																						"type": "string"
																					},
																					"@taxType": {
																						"type": "string"
																					}
																				}
																			},
																			"TotalTax": {
																				"type": "string"
																			},
																			"@lineItemNumber": {
																				"type": "string"
																			}
																		}
																	}
																},
																"Seller": {
																	"type": "object",
																	"properties": {
																		"Company": {
																			"type": "string"
																		}
																	}
																},
																"SubTotal": {
																	"type": "string"
																},
																"Total": {
																	"type": "string"
																},
																"TotalTax": {
																	"type": "string"
																},
																"@documentDate": {
																	"type": "string"
																},
																"@documentNumber": {
																	"type": "string"
																},
																"@transactionType": {
																	"type": "string"
																}
															}
														},
														"@xmlns": {
															"type": "string"
														},
														"@xmlns:xsi": {
															"type": "string"
														}
													}
												}
											}
										},
										"soapenv:Header": {
											"type": "string"
										},
										"@xmlns:soapenv": {
											"type": "string"
										}
									}
								}
							}
						},
						"orderid": {
							"type": "string"
						},
						"source": {
							"type": "string"
						},
						"storeid": {
							"type": "string"
						}
					}
				},
				"typeProperties": {
					"collectionName": "WebsiteData"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CosmosDb2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "data.csv",
						"folderPath": "troubleshoot",
						"fileSystem": "samplefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "files",
						"fileSystem": "samplefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_s6t')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TPID",
						"type": "bigint",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "[ACRMonthlyNetM/MIncrease]",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Reporting_ACRNewBizandErosion_Destination"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_syy')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "testid",
						"type": "smallint",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "ACRMonthlyNetM/MIncrease",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "testdwcolumnissue"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_s6t')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TPID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "[ACRMonthlyNetM/MIncrease]",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Reporting_ACRNewBizandErosion1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_syy')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "testid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ACRMonthlyNetM/MIncrease",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Reporting_ACRNewBizandErosion"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('AzureBlobStorage1_properties_typeProperties_serviceEndpoint')]",
					"tenant": "[parameters('AzureBlobStorage1_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('AzureBlobStorage1_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('AzureBlobStorage1_servicePrincipalKey')]"
					},
					"accountKind": "StorageV2"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage3')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage3_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage3_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IntegrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IntegrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDb1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDb1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDb2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDb2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FileSource')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('FileSource_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/l200kv_LinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('l200kv_LinkedService_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/l200synapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('l200synapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/l200synapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('l200synapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/l200withaccesskey')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('l200withaccesskey_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyc_tlc_green')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('nyc_tlc_green_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wsasadvidmcorpeus2-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('wsasadvidmcorpeus2-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime1')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": false
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(Column_1 = replace(Column_1,\",\",\"\")) ~> DerivedColumn1",
						"DerivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as string,",
						"          Name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 alterRow(insertIf(isNull(ID))) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as decimal(18,0),",
						"          name as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText1')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TestProductCategory_ProductCategory_DataFlow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TestProductCategory"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wsasadvidmcorpeus2-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "ProductCategorycsvSource"
						}
					],
					"sinks": [
						{
							"name": "ProductCategorySink"
						}
					],
					"transformations": [
						{
							"name": "SelectProductCategory"
						}
					],
					"script": "source(output(\n\t\tProductCategoryID as short,\n\t\tName as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'fsdvidmcorpeus2',\n\tfolderPath: 'test-source',\n\tfileName: 'ProductCategory.csv',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> ProductCategorycsvSource\nProductCategorycsvSource select(mapColumn(\n\t\tProductCategoryId = ProductCategoryID,\n\t\tProductCategoryName = Name,\n\t\tProductCategoryDescription = Name\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectProductCategory\nSelectProductCategory sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'DatabaseTest',\n\ttableName: 'ProductCategory',\n\tinput(\n\t\tProductCategoryId as integer,\n\t\tProductCategoryName as string,\n\t\tProductCategoryDescription as string\n\t)) ~> ProductCategorySink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wsasadvidmcorpeus2-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create external table with SQL')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/* Note: this script is filtered on a specific month. You can modify the location to read the entire dataset. */\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat')\n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat]\n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'nyctlc_azureopendatastorage_blob_core_windows_net')\n\tCREATE EXTERNAL DATA SOURCE [nyctlc_azureopendatastorage_blob_core_windows_net]\n\tWITH (\n\t\tLOCATION = 'wasbs://nyctlc@azureopendatastorage.blob.core.windows.net',\n\t\tTYPE     = HADOOP\n\t)\nGO\n\nCREATE EXTERNAL TABLE nyc_tlc_yellow_trip_ext (\n\t[vendorID] varchar(8000),\n\t[tpepPickupDateTime] datetime2(7),\n\t[tpepDropoffDateTime] datetime2(7),\n\t[passengerCount] int,\n\t[tripDistance] float,\n\t[puLocationId] varchar(8000),\n\t[doLocationId] varchar(8000),\n\t[startLon] float,\n\t[startLat] float,\n\t[endLon] float,\n\t[endLat] float,\n\t[rateCodeId] int,\n\t[storeAndFwdFlag] varchar(8000),\n\t[paymentType] varchar(8000),\n\t[fareAmount] float,\n\t[extra] float,\n\t[mtaTax] float,\n\t[improvementSurcharge] varchar(8000),\n\t[tipAmount] float,\n\t[tollsAmount] float,\n\t[totalAmount] float\n\t)\n\tWITH (\n    LOCATION = 'yellow/puYear=2014/puMonth=3/',\n    -- LOCATION = 'yellow'\n\tDATA_SOURCE = [nyctlc_azureopendatastorage_blob_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat],\n\tREJECT_TYPE = VALUE,\n\tREJECT_VALUE = 0\n\t)\nGO\n\nSELECT TOP 100 * FROM nyc_tlc_yellow_trip_ext\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "l200provisioned",
						"poolName": "l200provisioned"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK     'https://azureopendatastorage.blob.core.windows.net/nyctlc/green/puYear=*/puMonth=*/*.parquet',\n        FORMAT = 'parquet'\n    ) AS [result];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [decennialTime]\n,[stateName]\n,[countyName]\n,[population]\n,[race]\n,[sex]\n,[minAge]\n,[maxAge]\n FROM [dbo].[usPopulationView]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "l200Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://l200permissiontestsa.blob.core.windows.net/samplefiles/troubleshoot/data.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://l200permissiontestsa.blob.core.windows.net/samplefiles/files/sample3.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create TABLE test1",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Database1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Use file metadata in queries')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/* Filename */\n/* The following sample reads the NYC Yellow Taxi data files for the month September of 2017 and returns the number of rides per file. */\nSELECT\n    nyc.filename() AS [filename]\n    ,COUNT_BIG(*) AS [rows]\nFROM\n    OPENROWSET(\n    BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/taxi/year=2017/month=9/*.parquet',\n    FORMAT='PARQUET'\n    ) nyc\nGROUP BY nyc.filename();\n\n/* The following example shows how filename() can be used in the WHERE clause to filter the files to be read. */\nSELECT\n    r.filename() AS [filename]\n    ,COUNT_BIG(*) AS [rows]\nFROM OPENROWSET(\n    BULK 'https://sqlondemandstorage.blob.core.windows.net/public-csv/taxi/yellow_tripdata_2017-*.csv',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    FIRSTROW = 2)\n    WITH (C1 varchar(200) ) AS [r]\nWHERE\n    r.filename() IN ('yellow_tripdata_2017-10.csv', 'yellow_tripdata_2017-11.csv', 'yellow_tripdata_2017-12.csv')\nGROUP BY\n    r.filename()\nORDER BY\n    [filename];\n\n\n/* Filepath */\n/* The following sample reads NYC Yellow Taxi data files for the last three months of 2017. It returns the number of rides per file path. */\nSELECT\n    r.filepath() AS filepath\n    ,COUNT_BIG(*) AS [rows]\nFROM OPENROWSET(\n    BULK 'https://sqlondemandstorage.blob.core.windows.net/public-csv/taxi/yellow_tripdata_2017-1*.csv',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    FIRSTROW = 2\n    )\n    WITH (\n        vendor_id INT\n    ) AS [r]\nGROUP BY\n    r.filepath()\nORDER BY\n    filepath;\n\n/* The following example shows how filepath() can be used in the WHERE clause to filter the files to be read, shows the last three months of 2017. */\nSELECT\n    r.filepath() AS filepath\n    ,r.filepath(1) AS [year]\n    ,r.filepath(2) AS [month]\n    ,COUNT_BIG(*) AS [rows]\nFROM OPENROWSET(\n    BULK 'https://sqlondemandstorage.blob.core.windows.net/public-csv/taxi/yellow_tripdata_*-*.csv',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    FIRSTROW = 2\n    )\nWITH (\n    vendor_id INT\n) AS [r]\nWHERE\n    r.filepath(1) IN ('2017')\n    AND r.filepath(2) IN ('10', '11', '12')\nGROUP BY\n    r.filepath()\n    ,r.filepath(1)\n    ,r.filepath(2)\nORDER BY\n    filepath;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "tsgpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "aefb8abb-9130-4f2d-a7b0-009e41d51baf"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e7930490-e1c6-48b2-865c-aa9e0547dfad/resourceGroups/L200TestPrepRG/providers/Microsoft.Synapse/workspaces/l200synapse/bigDataPools/tsgpool",
						"name": "tsgpool",
						"type": "Spark",
						"endpoint": "https://l200synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/tsgpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"print('hi')"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import subprocess\r\n",
							"import time\r\n",
							"\r\n",
							"#1. Establish the subprocess \r\n",
							"commandlist = [\"telnet\"] + [\"110.166.52.4:22\"]\r\n",
							"p = subprocess.Popen(commandlist,\r\n",
							"                     stdin = subprocess.PIPE,\r\n",
							"                     stdout = subprocess.PIPE,\r\n",
							"                      stderr = subprocess.PIPE)\r\n",
							"#2. Give the login name. There is no password\r\n",
							"p.stdin.write(\"root\\r\")\r\n",
							"#3. Adding this for sync to avoid any overlap\r\n",
							"time.sleep(1)\r\n",
							"#4. Invoke the communicate to execute the applicati"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import subprocess\r\n",
							"command = 'ping -c 1 private-decea2sremonitoring.eastus2.kusto.windows.net'\r\n",
							"r = subprocess.run(command, capture_output=True, text = True, shell=True)\r\n",
							"print(r.stderr)\r\n",
							"print(r.stdout)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 3')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "tsgpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2af19812-3d4d-48d2-a330-af4ba1515421"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e7930490-e1c6-48b2-865c-aa9e0547dfad/resourceGroups/L200TestPrepRG/providers/Microsoft.Synapse/workspaces/l200synapse/bigDataPools/tsgpool",
						"name": "tsgpool",
						"type": "Spark",
						"endpoint": "https://l200synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/tsgpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"var df1 = spark.sql(\"select * from test\");\r\n",
							"df1.createOrReplaceTempView(\"spark31\")\r\n",
							"var df2 = spark.sql(\"select * from spark31\")\r\n",
							"df2.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"config.set(\"spark.hadoop.fs.wasb.impl\", \"org.apache.hadoop.fs.azure.NativeAzureFileSystem\");\r\n",
							" config.set(\"fs.azure.account.key.l200permissiontestsa.blob.core.windows.net\", \"UIEGOCdyY+DNEMwIt075L5CiahxlBk5Ms+uIPKpKy5VTLF8vOtHGo+jaIif2LoTueI2ayeI5yUk3AvRg0BHutA==\");\r\n",
							"\r\n",
							" //baseDir = \"wasb[s]://BlobStorageContainer@yourUser.blob.core.windows.net/\"\r\n",
							"\r\n",
							"val dfParquet = spark.read.csv(baseDir + \"samplefiles/files/sample.csv\");"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 4')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark24",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9dede4dd-b41b-45b1-8892-9ebb48ccb34a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e7930490-e1c6-48b2-865c-aa9e0547dfad/resourceGroups/L200TestPrepRG/providers/Microsoft.Synapse/workspaces/l200synapse/bigDataPools/spark24",
						"name": "spark24",
						"type": "Spark",
						"endpoint": "https://l200synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark24",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"var df = spark.sql(\"select * from test2\");\r\n",
							"df.createOrReplaceTempView(\"spark24\")\r\n",
							"var df4 = spark.sql(\"select * from spark24\")\r\n",
							"df4.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 5')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "tsgpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c704d40a-e316-4241-b9b5-664b3f268f8a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e7930490-e1c6-48b2-865c-aa9e0547dfad/resourceGroups/L200TestPrepRG/providers/Microsoft.Synapse/workspaces/l200synapse/bigDataPools/tsgpool",
						"name": "tsgpool",
						"type": "Spark",
						"endpoint": "https://l200synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/tsgpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# NOTE\n",
							"\n",
							"For Spark 3 Cosmos DB connector has slightly different configuration. Please select different snippest if a Spark 3.1 + pool is attached."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"# Load a streaming Spark DataFrame from a Cosmos DB container\n",
							"# To select a preferred list of regions in a multi-region Cosmos DB account, add .option(\"spark.cosmos.preferredRegions\", \"<Region1>,<Region2>\")\n",
							"\n",
							"# For Spark 2.4\n",
							"dfStream = spark.readStream\\\n",
							"    .format(\"cosmos.oltp\")\\\n",
							"    .option(\"spark.synapse.linkedService\", \"cosmolinked\")\\\n",
							"    .option(\"spark.cosmos.container\", \"Items\")\\\n",
							"    .option(\"spark.cosmos.changeFeed.readEnabled\", \"true\")\\\n",
							"    .option(\"spark.cosmos.changeFeed.startFromTheBeginning\", \"true\")\\\n",
							"    .option(\"spark.cosmos.changeFeed.checkpointLocation\", \"/localReadCheckpointFolder\")\\\n",
							"    .option(\"spark.cosmos.changeFeed.queryName\", \"streamQuery\")\\\n",
							"    .load()\n",
							"\n",
							"# For Spark 3.1 +\n",
							"# dfStream = spark.readStream\\\n",
							"#     .format(\"cosmos.oltp.changeFeed\")\\\n",
							"#     .option(\"spark.synapse.linkedService\", \"cosmolinked\")\\\n",
							"#     .option(\"spark.cosmos.container\", \"Items\")\\\n",
							"#     .option(\"spark.cosmos.changeFeed.startFrom\", \"Beginning\")\\\n",
							"#     .option(\"spark.cosmos.changeFeed.mode\", \"Incremental\")\\\n",
							"#     .load()\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 7')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark24",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ff4eced5-f00b-4dec-a1e1-de9c73e62653"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e7930490-e1c6-48b2-865c-aa9e0547dfad/resourceGroups/L200TestPrepRG/providers/Microsoft.Synapse/workspaces/l200synapse/bigDataPools/spark24",
						"name": "spark24",
						"type": "Spark",
						"endpoint": "https://l200synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark24",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Read from Cosmos DB analytical store into a Spark DataFrame and display 10 rows from the DataFrame\n",
							"# To select a preferred list of regions in a multi-region Cosmos DB account, add .option(\"spark.cosmos.preferredRegions\", \"<Region1>,<Region2>\")\n",
							"\n",
							"df = spark.read\\\n",
							"    .format(\"cosmos.olap\")\\\n",
							"    .option(\"spark.synapse.linkedService\", \"cosmosDBB\")\\\n",
							"    .option(\"spark.cosmos.container\", \"WebsiteData\")\\\n",
							"    .load()\n",
							"\n",
							"display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Spark job definition 1')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "tsgpool",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Spark job definition 1",
					"file": "abfss://filesystem@l200testsa.dfs.core.windows.net/wordcount.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6f98744e-9649-469a-8f5c-f66b922ee17b"
					},
					"args": [
						"abfss://filesystem@l200testsa.dfs.core.windows.net/shakespeare.txt",
						"abfss://filesystem@l200testsa.dfs.core.windows.net/result"
					],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Database1')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Database1",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://l200testfs@l200testsa.dfs.core.windows.net/Database1",
								"Properties": {
									"FormatType": "csv",
									"LinkedServiceName": "l200synapse-WorkspaceDefaultStorage"
								}
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tsgpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 30
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus2"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tsmallpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"libraryRequirements": {
					"content": "azure-cosmos",
					"filename": "requirements.txt",
					"time": "2022-01-07T22:33:29.9161146Z"
				},
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus2"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spark24')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus2"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/l200provisioned')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus2"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-custstgacct--l200synapse-l200testsa')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e7930490-e1c6-48b2-865c-aa9e0547dfad/resourceGroups/L200TestPrepRG/providers/Microsoft.Storage/storageAccounts/l200testsa",
				"groupId": "dfs",
				"fqdns": [
					"l200testsa.dfs.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sql--l200synapse')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e7930490-e1c6-48b2-865c-aa9e0547dfad/resourceGroups/L200TestPrepRG/providers/Microsoft.Synapse/workspaces/l200synapse",
				"groupId": "sql",
				"fqdns": [
					"l200synapse.d646ed62-b8bb-4dd2-bd2c-0a931c9d4c1c.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sqlOnDemand--l200synapse')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e7930490-e1c6-48b2-865c-aa9e0547dfad/resourceGroups/L200TestPrepRG/providers/Microsoft.Synapse/workspaces/l200synapse",
				"groupId": "sqlOnDemand",
				"fqdns": [
					"l200synapse-ondemand.d646ed62-b8bb-4dd2-bd2c-0a931c9d4c1c.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}